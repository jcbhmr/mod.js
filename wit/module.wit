package jcbhmr:mod@0.26.0-rc1;

interface module {
    type error = string;

    pseudo-version-timestamp-format: func() -> string;

    canonical-version: func(v: string) -> string;
    check: func(path: string, version: string) -> result<_, error>;
    check-file-path: func(path: string) -> result<_, error>;
    check-import-path: func(path: string) -> result<_, error>;
    check-path: func(path: string) -> result<_, error>;
    check-path-major: func(v: string, path-major: string) -> result<_, error>;
    escape-path: func(path: string) -> result<string, error>;
    escape-version: func(v: string) -> result<string, error>;
    is-pseudo-version: func(v: string) -> bool;
    is-zero-pseudo-version: func(v: string) -> bool;
    match-path-major: func(v: string, path-major: string) -> bool;
    match-prefix-patterns: func(globs: string, target: string) -> bool;
    path-major-prefix: func(path-major: string) -> string;
    pseudo-version: func(major: string, older: string, t: string, rev: string) -> string;
    pseudo-version-base: func(v: string) -> result<string, error>;
    pseudo-version-rev: func(v: string) -> result<string, error>;
    pseudo-version-time: func(v: string) -> result<string, error>;
    sort: func(%list: list<version>);
    split-path-version: func(path: string) -> option<tuple<string, string>>;
    unescape-path: func(escaped: string) -> result<string, error>;
    unescape-version: func(escaped: string) -> result<string, error>;
    version-error: func(v: version, err: string) -> string;
    zero-pseudo-version: func(major: string) -> string;

    resource invalid-path-error {
        constructor();
        kind: func() -> string;
        set-kind: func(v: string);
        path: func() -> string;
        set-path: func(v: string);
        err: func() -> option<string>;

        error: func() -> string;
        unwrap: func() -> option<string>;
    }
    resource invalid-version-error {
        constructor();
        version: func() -> string;
        set-version: func(v: string);
        pseudo: func() -> bool;
        set-pseudo: func(v: bool);
        err: func() -> option<string>;

        error: func() -> string;
        unwrap: func() -> option<string>;
    }
    resource module-error {
        constructor();
        path: func() -> string;
        set-path: func(v: string);
        version: func() -> string;
        set-version: func(v: string);
        err: func() -> option<string>;

        error: func() -> string;
        unwrap: func() -> option<string>;
    }
    record version {
        path: string,
        version: string,
    }
    version-string: func(v: version) -> string;
}