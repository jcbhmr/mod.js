// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package module represents the exported interface "jcbhmr:mod/module@0.26.0-rc1".
package module

import (
	"go.bytecodealliance.org/cm"
)

// Error represents the string "jcbhmr:mod/module@0.26.0-rc1#error".
//
//	type error = string
type Error string

// InvalidPathError represents the exported resource "jcbhmr:mod/module@0.26.0-rc1#invalid-path-error".
//
//	resource invalid-path-error
type InvalidPathError cm.Resource

// InvalidPathErrorResourceNew represents the imported resource-new for resource "invalid-path-error".
//
// Creates a new resource handle.
//
//go:nosplit
func InvalidPathErrorResourceNew(rep cm.Rep) (result InvalidPathError) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_InvalidPathErrorResourceNew((uint32)(rep0))
	result = cm.Reinterpret[InvalidPathError]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "invalid-path-error".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self InvalidPathError) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_InvalidPathErrorResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "invalid-path-error".
//
// Drops a resource handle.
//
//go:nosplit
func (self InvalidPathError) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvalidPathErrorResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.InvalidPathError.Destructor = func(self cm.Rep) {}
}

// InvalidVersionError represents the exported resource "jcbhmr:mod/module@0.26.0-rc1#invalid-version-error".
//
//	resource invalid-version-error
type InvalidVersionError cm.Resource

// InvalidVersionErrorResourceNew represents the imported resource-new for resource "invalid-version-error".
//
// Creates a new resource handle.
//
//go:nosplit
func InvalidVersionErrorResourceNew(rep cm.Rep) (result InvalidVersionError) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_InvalidVersionErrorResourceNew((uint32)(rep0))
	result = cm.Reinterpret[InvalidVersionError]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "invalid-version-error".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self InvalidVersionError) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_InvalidVersionErrorResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "invalid-version-error".
//
// Drops a resource handle.
//
//go:nosplit
func (self InvalidVersionError) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvalidVersionErrorResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.InvalidVersionError.Destructor = func(self cm.Rep) {}
}

// ModuleError represents the exported resource "jcbhmr:mod/module@0.26.0-rc1#module-error".
//
//	resource module-error
type ModuleError cm.Resource

// ModuleErrorResourceNew represents the imported resource-new for resource "module-error".
//
// Creates a new resource handle.
//
//go:nosplit
func ModuleErrorResourceNew(rep cm.Rep) (result ModuleError) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_ModuleErrorResourceNew((uint32)(rep0))
	result = cm.Reinterpret[ModuleError]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "module-error".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self ModuleError) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ModuleErrorResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "module-error".
//
// Drops a resource handle.
//
//go:nosplit
func (self ModuleError) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ModuleErrorResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.ModuleError.Destructor = func(self cm.Rep) {}
}

// Version represents the record "jcbhmr:mod/module@0.26.0-rc1#version".
//
//	record version {
//		path: string,
//		version: string,
//	}
type Version struct {
	_       cm.HostLayout `json:"-"`
	Path    string        `json:"path"`
	Version string        `json:"version"`
}
